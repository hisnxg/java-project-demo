server:
  port: 8089
spring:
  application:
    name: bill-consumer-service
eureka:
  client:
    service-url:
      defaultZone: http://127.0.0.1:8088/eureka
      # 不注册自己
    register-with-eureka: true
    # 不拉取服务
    fetch-registry: true
feign:
  client:
    config:
      defalut:
        connectTimeout: 5000 # 防止由于服务器处理时间长而阻塞调用者
        readTimeout: 5000 # 从连接建立是开始应用，在返回响应时间过长时触发
  circuitbreaker:
    enabled: true # 开启feign的熔断器支持
  compression:
    request:
      enabled: true # 请求压缩
      mime-types: text/xml,application/xml,application/json # 压缩的类型
      min-request-size: 2048 # 请求最小压缩的阈值
    response:
      enabled: true #响应压缩
      # useGzipDecoder: true #使用gzip解码器解码响应数据
logging:
  level:
    com.nxg: debug
resilience4j:
  bulkhead:
    configs:
      default:
        failureRateThreshold: 30 #失败请求百分比，超过这个比例，CircuitBreaker变为OPEN状态
        slidingWindowSize: 10 #滑动窗口的大小，配置COUNT_BASED,表示10个请求，配置TIME_BASED表示10秒
        minimumNumberOfCalls: 5 #最小请求个数，只有在滑动窗口内，请求个数达到这个个数，才会触发CircuitBreader对于断路器的判断
        slidingWindowType: TIME_BASED #滑动窗口的类型
        permittedNumberOfCallsInHalfOpenState: 3 #当CircuitBreaker处于HALF_OPEN状态的时候，允许通过的请求个数
        automaticTransitionFromOpenToHalfOpenEnabled: true #设置true，表示自动从OPEN变成HALF_OPEN，即使没有请求过来
        waitDurationInOpenState: 2s #从OPEN到HALF_OPEN状态需要等待的时间
        recordExceptions: #异常名单 - java.lang.Exception
    instances:
      backendA:
        baseConfig: default #熔断器backendA，继承默认配置default
      backendB:
        failureRateThreshold: 50
        slowCallDurationThreshold: 2s #慢调用时间阈值，高于这个阈值的呼叫视为慢调用，并增加慢调用比例。
        slowCallRateThreshold: 30  #慢调用百分比阈值，断路器把调用时间大于slowCallDurationThreshold，视为慢调用，当慢调用比例大于阈值，断路器打开，并进行服务降级
        slidingWindowSize: 10
        slidingWindowType: TIME_BASED
        minimumNumberOfCalls: 2
        permittedNumberOfCallsInHalfOpenState: 2
        waitDurationInOpenState: 2s #从OPEN到HALF_OPEN状态需要等待的时间
    bulkhead: #信号量隔离
      configs:
        default:
          maxConcurrentCalls: 5 # 隔离允许并发线程执行的最大数量
          maxWaitDuration: 20ms # 当达到并发调用数量时，新的线程的阻塞时间
      instances:
        backendA:
          baseConfig: default
        backendB:
          maxWaitDuration: 10ms
          maxConcurrentCalls: 20
    thread-pool-bulkhead: #线程池隔离
      configs:
        default:
          maxThreadPoolSize: 4 # 最大线程池大小
          coreThreadPoolSize: 2 # 核心线程池大小
          queueCapacity: 2 # 队列容量
      instances:
        backendA:
          baseConfig: default
        backendB:
          maxThreadPoolSize: 1
          coreThreadPoolSize: 1
          queueCapacity: 1
    ratelimiter: #限流配置
      configs:
        default:
          timeoutDuration: 5 # 线程等待权限的默认等待时间
          limitRefreshPeriod: 1s # 限流器每隔1s刷新一次，将允许处理的最大请求重置为2
          limitForPeriod: 2 #在一个刷新周期内，允许执行的最大请求数
      instances:
        backendA:
          baseConfig: default
        backendB:
          timeoutDuration: 5
          limitRefreshPeriod: 1s
          limitForPeriod: 5
